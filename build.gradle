/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'kensakurai' at '17/05/02 1:20' with Gradle 2.2.1
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at http://gradle.org/docs/2.2.1/userguide/tutorial_java_projects.html
 */
plugins {
    id 'java'
    id 'org.springframework.boot' version '2.7.18'
    id 'io.spring.dependency-management' version '1.0.15.RELEASE'
    id 'jacoco'
    id 'checkstyle'
    id 'pmd'
    id 'com.github.spotbugs' version '5.0.14'
}

group = 'xyz.monotalk'
version = '1.0-SNAPSHOT'

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'args4j:args4j:2.33'
    implementation 'org.apache.commons:commons-text:1.11.0'
    implementation 'com.google.oauth-client:google-oauth-client:1.22.0'
    implementation 'com.google.http-client:google-http-client:1.22.0'
    implementation 'com.google.http-client:google-http-client-jackson2:1.22.0'
    implementation 'com.google.api-client:google-api-client:1.22.0'
    implementation 'com.google.apis:google-api-services-webmasters:v3-rev22-1.22.0'
    implementation 'com.google.guava:guava:20.0'
    implementation 'commons-io:commons-io:2.15.1'
    
    compileOnly 'org.projectlombok:lombok:1.18.30'
    annotationProcessor 'org.projectlombok:lombok:1.18.30'
    
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.mockito:mockito-core:4.11.0'
    testImplementation 'org.mockito:mockito-inline:4.11.0'
    testImplementation 'junit:junit:4.13.2'
}

jacoco {
    toolVersion = "0.8.11"
}

jacocoTestReport {
    reports {
        xml.required = true
        csv.required = false
        html.required = true
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
}

test {
    useJUnit() // JUnit 4を使用するように変更
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
        showStandardStreams = true
    }
    jvmArgs '--add-opens', 'java.base/java.lang=ALL-UNNAMED'
    finalizedBy jacocoTestReport // テスト完了後にカバレッジレポートを生成
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.7 // 最低70%のカバレッジを要求
            }
        }

        rule {
            element = 'CLASS'
            excludes = ['*.CmdLineArgmentException', '*.CmdLineIOException']

            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.7
            }

            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.7
            }
        }
    }
}

springBoot {
    mainClass = 'xyz.monotalk.google.webmaster.cli.CliApplication'
}

jar {
    manifest {
        attributes 'Main-Class': 'xyz.monotalk.google.webmaster.cli.CliApplication'
    }
}

// Checkstyleの設定
checkstyle {
    toolVersion = '9.3'
    configFile = file("${rootDir}/config/checkstyle/checkstyle.xml")
    ignoreFailures = false
    maxWarnings = 0
}

// PMDの設定
pmd {
    toolVersion = '7.13.0'
    ruleSetFiles = files("${rootDir}/config/pmd/ruleset.xml")
    ignoreFailures = false
    consoleOutput = true
}

// SpotBugsの設定
spotbugs {
    ignoreFailures = false
    effort = 'default'
    reportLevel = 'medium'
}

spotbugsMain {
    reports {
        html {
            required = true
            outputLocation = file("${buildDir}/reports/spotbugs/main/spotbugs.html")
        }
    }
}

spotbugsTest {
    reports {
        html {
            required = true
            outputLocation = file("${buildDir}/reports/spotbugs/test/spotbugs.html")
        }
    }
}
